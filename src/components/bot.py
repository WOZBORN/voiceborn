import json
import os
from idlelib.iomenu import encoding

from dotenv import load_dotenv
import telebot
from telebot.types import (InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
                           CallbackQuery, Message, User)

from src.components.gtts_voice import get_supported_languages, generate_gtts_audio
from src.components.ai_voice import get_available_voices, generate_audio
import src.components.db_manager as db


load_dotenv()
db.init_db()

BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)

# –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞:
answers = json.load(open("src/answers.json", encoding="utf-8"))

# –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_last_message_id = {}
user_states = {}

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# user_states[user_id] = {
#     "mode": "gtts" or "elevenlabs",
#     "lang": "ru",  # –¥–ª—è gtts
#     "voice_id": "xxxx",  # –¥–ª—è elevenlabs
# }

# --- –ö–æ–º–∞–Ω–¥—ã ---


def handle_exception(user: User, stage: str = "unknown"):
    import traceback

    # –ü–æ–ª—É—á–∏—Ç—å owner_id –∏–∑ .env
    owner_id = os.environ.get("BOT_OWNER_TELEGRAM_ID")
    error_trace = traceback.format_exc()

    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"[ERROR] –ù–∞ —ç—Ç–∞–ø–µ: {stage}")
    print(f"[USER] {user.id} @{user.username or 'NoUsername'}")
    print(error_trace)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if owner_id:
        try:
            bot.send_message(
                int(owner_id),
                f"‚ùó –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} @{user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}\n"
                f"üìç –≠—Ç–∞–ø: {stage}\n"
            )
        except Exception as owner_err:
            print("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É:", owner_err)


@bot.message_handler(commands=['start'])
def start_handler(message: Message):
    user_id = message.from_user.id
    db.ensure_user_exists(user_id)

    user_states[user_id] = {}  # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üé§ gTTS", callback_data="mode_gtts"))
    markup.add(InlineKeyboardButton("üéô ElevenLabs", callback_data="mode_elevenlabs"))

    sent_message = bot.send_message(message.chat.id, answers["start"], reply_markup=markup)
    user_last_message_id[user_id] = sent_message.message_id

@bot.message_handler(commands=['info'])
def info_handler(message: Message):
    bot.send_message(message.chat.id, answers["info"])

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ ---

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: CallbackQuery):
    user_id = call.from_user.id

    if call.data:
        chat = call.message.chat.id
        # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        last_message_id = user_last_message_id.get(user_id)
        if last_message_id:
            try:
                bot.delete_message(chat_id=chat, message_id=last_message_id)
            except Exception as e:
                print(f"Error deleting message: {e}")


    if call.data == "mode_gtts":
        user_states[user_id] = {"mode": "gtts"}
        choose_gtts_language(call.message, user_id)

    elif call.data == "mode_elevenlabs":
        user_states[user_id] = {"mode": "elevenlabs"}
        choose_elevenlabs_voice(call, user_id)

# --- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è gTTS ---

def choose_gtts_language(message: Message, user_id: int):
    langs = get_supported_languages()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for code, name in langs.items():
        markup.add(KeyboardButton(f"{code} ‚Äî {name}"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –æ–∑–≤—É—á–∫–∏:", reply_markup=markup)

# --- –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –¥–ª—è ElevenLabs ---

def choose_elevenlabs_voice(call: CallbackQuery, user_id: int):
    try:
        voices = get_available_voices()
    except Exception:
        handle_exception(call.from_user, stage="get_available_voices")
        bot.send_message(call.message.chat.id, answers["elevenlabs_error"])
        return
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for voice in voices:
        markup.add(KeyboardButton(voice["name"]))

    allowed, used, total = db.has_enough_limit(user_id)
    limit_ended = " (–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!)" if not allowed else ""
    bot.send_message(
        call.message.chat.id,
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {used}/{total}{limit_ended}\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:",
        reply_markup=markup
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id not in user_states:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return

    user_data = user_states[user_id]

    if user_data.get("mode") == "gtts":
        if "lang" not in user_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —è–∑—ã–∫
            code = text.split("‚Äî")[0].strip()
            langs = get_supported_languages()
            if code in langs:
                user_states[user_id]["lang"] = code
                bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {langs[code]}.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏.", reply_markup=ReplyKeyboardRemove())
            else:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        else:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
            lang = user_data["lang"]
            file_path = generate_gtts_audio(text, lang=lang, output_path=f"{user_id}_gtts.mp3")
            with open(file_path, "rb") as f:
                bot.send_audio(message.chat.id, f)
            os.remove(file_path)

    elif user_data.get("mode") == "elevenlabs":
        if "voice_id" not in user_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≥–æ–ª–æ—Å
            voice_name = text.strip()
            voices = get_available_voices()
            voice_id = None
            for voice in voices:
                if voice["name"].lower() == voice_name.lower():
                    voice_id = voice["id"]
                    break
            if voice_id:
                user_states[user_id]["voice_id"] = voice_id
                bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {voice_name}.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏.", reply_markup=ReplyKeyboardRemove())
            else:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–ª–æ—Å. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        else:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
            try:
                allowed, used, total = db.has_enough_limit(user_id, text)
                if not allowed:
                    bot.send_message(message.chat.id, f"‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.\n{used}/{total} —Å–∏–º–≤–æ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ.\n–î–Ω–µ–π –¥–æ –æ–±–Ω—É–ª–µ–Ω–∏—è –ª\n–ü–æ–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è gTTS /start")
                    return
                voice_id = user_data["voice_id"]
                file_path = generate_audio(text, voice_id=voice_id, output_path=f"{user_id}_elevenlabs.mp3")
                if os.path.exists(file_path):
                    db.increment_limit_usage(user_id, len(text))
                    bot.send_message(message.chat.id, f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used+len(text)}/{total}")
                    with open(file_path, "rb") as f:
                        bot.send_audio(message.chat.id, f)
                    os.remove(file_path)
            except:
                bot.send_message(message.chat.id, answers["error"])

    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /start.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def start_bot():
    bot.polling(none_stop=True)
